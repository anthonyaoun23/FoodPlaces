{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"./ExpoTaskManager","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defineTask = defineTask;\n  exports.isTaskDefined = isTaskDefined;\n  exports.isTaskRegisteredAsync = isTaskRegisteredAsync;\n  exports.getTaskOptionsAsync = getTaskOptionsAsync;\n  exports.getRegisteredTasksAsync = getRegisteredTasksAsync;\n  exports.unregisterTaskAsync = unregisterTaskAsync;\n  exports.unregisterAllTasksAsync = unregisterAllTasksAsync;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[2], \"@unimodules/core\");\n\n  var _ExpoTaskManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./ExpoTaskManager\"));\n\n  var eventEmitter = new _core.EventEmitter(_ExpoTaskManager.default);\n  var tasks = new Map();\n  var isRunningDuringInitialization = true;\n\n  function _validateTaskName(taskName) {\n    if (!taskName || typeof taskName !== 'string') {\n      throw new TypeError('`taskName` must be a non-empty string.');\n    }\n  }\n\n  function defineTask(taskName, task) {\n    if (!isRunningDuringInitialization) {\n      console.error(\"TaskManager.defineTask must be called during initialization phase!\");\n      return;\n    }\n\n    if (!taskName || typeof taskName !== 'string') {\n      console.warn(\"TaskManager.defineTask: 'taskName' argument must be a non-empty string.\");\n      return;\n    }\n\n    if (!task || typeof task !== 'function') {\n      console.warn(\"TaskManager.defineTask: 'task' argument must be a function.\");\n      return;\n    }\n\n    if (tasks.has(taskName)) {\n      console.warn(\"TaskManager.defineTask: task '\" + taskName + \"' is already defined.\");\n      return;\n    }\n\n    tasks.set(taskName, task);\n  }\n\n  function isTaskDefined(taskName) {\n    return tasks.has(taskName);\n  }\n\n  function isTaskRegisteredAsync(taskName) {\n    return _regenerator.default.async(function isTaskRegisteredAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (_ExpoTaskManager.default.isTaskRegisteredAsync) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');\n\n          case 2:\n            _validateTaskName(taskName);\n\n            return _context.abrupt(\"return\", _ExpoTaskManager.default.isTaskRegisteredAsync(taskName));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  function getTaskOptionsAsync(taskName) {\n    return _regenerator.default.async(function getTaskOptionsAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (_ExpoTaskManager.default.getTaskOptionsAsync) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('TaskManager', 'getTaskOptionsAsync');\n\n          case 2:\n            _validateTaskName(taskName);\n\n            return _context2.abrupt(\"return\", _ExpoTaskManager.default.getTaskOptionsAsync(taskName));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  function getRegisteredTasksAsync() {\n    return _regenerator.default.async(function getRegisteredTasksAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (_ExpoTaskManager.default.getRegisteredTasksAsync) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');\n\n          case 2:\n            return _context3.abrupt(\"return\", _ExpoTaskManager.default.getRegisteredTasksAsync());\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  }\n\n  function unregisterTaskAsync(taskName) {\n    return _regenerator.default.async(function unregisterTaskAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (_ExpoTaskManager.default.unregisterTaskAsync) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('TaskManager', 'unregisterTaskAsync');\n\n          case 2:\n            _validateTaskName(taskName);\n\n            _context4.next = 5;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterTaskAsync(taskName));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    });\n  }\n\n  function unregisterAllTasksAsync() {\n    return _regenerator.default.async(function unregisterAllTasksAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (_ExpoTaskManager.default.unregisterAllTasksAsync) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');\n\n          case 2:\n            _context5.next = 4;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterAllTasksAsync());\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    });\n  }\n\n  eventEmitter.addListener(_ExpoTaskManager.default.EVENT_NAME, function _callee(_ref) {\n    var data, error, executionInfo, eventId, taskName, task, result;\n    return _regenerator.default.async(function _callee$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            data = _ref.data, error = _ref.error, executionInfo = _ref.executionInfo;\n            eventId = executionInfo.eventId, taskName = executionInfo.taskName;\n            task = tasks.get(taskName);\n            result = null;\n\n            if (!task) {\n              _context6.next = 20;\n              break;\n            }\n\n            _context6.prev = 5;\n            _context6.next = 8;\n            return _regenerator.default.awrap(task({\n              data: data,\n              error: error,\n              executionInfo: executionInfo\n            }));\n\n          case 8:\n            result = _context6.sent;\n            _context6.next = 14;\n            break;\n\n          case 11:\n            _context6.prev = 11;\n            _context6.t0 = _context6[\"catch\"](5);\n            console.error(\"TaskManager: Task \\\"\" + taskName + \"\\\" failed:\", _context6.t0);\n\n          case 14:\n            _context6.prev = 14;\n            _context6.next = 17;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n              eventId: eventId,\n              result: result\n            }));\n\n          case 17:\n            return _context6.finish(14);\n\n          case 18:\n            _context6.next = 25;\n            break;\n\n          case 20:\n            console.warn(\"TaskManager: Task \\\"\" + taskName + \"\\\" has been executed but looks like it is not defined. Please make sure that \\\"TaskManager.defineTask\\\" is called during initialization phase.\");\n            _context6.next = 23;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n              eventId: eventId,\n              result: result\n            }));\n\n          case 23:\n            _context6.next = 25;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterTaskAsync(taskName));\n\n          case 25:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[5, 11, 14, 18]]);\n  });\n  Promise.resolve().then(function () {\n    isRunningDuringInitialization = false;\n  });\n});","map":[[17,0,1,0],[19,0,3,0],[21,0,4,0],[21,6,4,6,"eventEmitter"],[21,18,4,18],[21,21,4,21],[21,25,4,25,"EventEmitter"],[21,43,4,21],[21,44,4,38,"ExpoTaskManager"],[21,68,4,21],[21,69,4,0],[22,0,5,0],[22,6,5,6,"tasks"],[22,11,5,11],[22,14,5,14],[22,18,5,18,"Map"],[22,21,5,14],[22,23,5,0],[23,0,6,0],[23,6,6,4,"isRunningDuringInitialization"],[23,35,6,33],[23,38,6,36],[23,42,6,0],[25,0,7,0],[25,11,7,9,"_validateTaskName"],[25,28,7,0],[25,29,7,27,"taskName"],[25,37,7,0],[25,39,7,37],[26,0,8,4],[26,8,8,8],[26,9,8,9,"taskName"],[26,17,8,8],[26,21,8,21],[26,28,8,28,"taskName"],[26,36,8,21],[26,41,8,41],[26,49,8,4],[26,51,8,51],[27,0,9,8],[27,12,9,14],[27,16,9,18,"TypeError"],[27,25,9,14],[27,26,9,28],[27,66,9,14],[27,67,9,8],[28,0,10,5],[29,0,11,1],[31,0,12,7],[31,11,12,16,"defineTask"],[31,21,12,7],[31,22,12,27,"taskName"],[31,30,12,7],[31,32,12,37,"task"],[31,36,12,7],[31,38,12,43],[32,0,13,4],[32,8,13,8],[32,9,13,9,"isRunningDuringInitialization"],[32,38,13,4],[32,40,13,40],[33,0,14,8,"console"],[33,6,14,8,"console"],[33,13,14,15],[33,14,14,16,"error"],[33,19,14,8],[34,0,15,8],[35,0,16,5],[37,0,17,4],[37,8,17,8],[37,9,17,9,"taskName"],[37,17,17,8],[37,21,17,21],[37,28,17,28,"taskName"],[37,36,17,21],[37,41,17,41],[37,49,17,4],[37,51,17,51],[38,0,18,8,"console"],[38,6,18,8,"console"],[38,13,18,15],[38,14,18,16,"warn"],[38,18,18,8],[39,0,19,8],[40,0,20,5],[42,0,21,4],[42,8,21,8],[42,9,21,9,"task"],[42,13,21,8],[42,17,21,17],[42,24,21,24,"task"],[42,28,21,17],[42,33,21,33],[42,43,21,4],[42,45,21,45],[43,0,22,8,"console"],[43,6,22,8,"console"],[43,13,22,15],[43,14,22,16,"warn"],[43,18,22,8],[44,0,23,8],[45,0,24,5],[47,0,25,4],[47,8,25,8,"tasks"],[47,13,25,13],[47,14,25,14,"has"],[47,17,25,8],[47,18,25,18,"taskName"],[47,26,25,8],[47,27,25,4],[47,29,25,29],[48,0,26,8,"console"],[48,6,26,8,"console"],[48,13,26,15],[48,14,26,16,"warn"],[48,18,26,8],[48,54,26,54,"taskName"],[48,62,26,8],[49,0,27,8],[50,0,28,5],[52,0,29,4,"tasks"],[52,4,29,4,"tasks"],[52,9,29,9],[52,10,29,10,"set"],[52,13,29,4],[52,14,29,14,"taskName"],[52,22,29,4],[52,24,29,24,"task"],[52,28,29,4],[53,0,30,1],[55,0,31,7],[55,11,31,16,"isTaskDefined"],[55,24,31,7],[55,25,31,30,"taskName"],[55,33,31,7],[55,35,31,40],[56,0,32,4],[56,11,32,11,"tasks"],[56,16,32,16],[56,17,32,17,"has"],[56,20,32,11],[56,21,32,21,"taskName"],[56,29,32,11],[56,30,32,4],[57,0,33,1],[59,0,34,7],[59,11,34,22,"isTaskRegisteredAsync"],[59,32,34,7],[59,33,34,44,"taskName"],[59,41,34,7],[60,0,34,7],[61,0,34,7],[62,0,34,7],[63,0,34,7],[64,0,34,7],[64,16,35,9,"ExpoTaskManager"],[64,41,35,25,"isTaskRegisteredAsync"],[64,62,34,7],[65,0,34,7],[66,0,34,7],[67,0,34,7],[69,0,34,7],[69,18,36,14],[69,22,36,18,"UnavailabilityError"],[69,47,36,14],[69,48,36,38],[69,61,36,14],[69,63,36,53],[69,86,36,14],[69,87,34,7],[71,0,34,7],[72,0,38,4,"_validateTaskName"],[72,12,38,4,"_validateTaskName"],[72,29,38,21],[72,30,38,22,"taskName"],[72,38,38,21],[72,39,38,4],[74,0,34,7],[74,45,39,11,"ExpoTaskManager"],[74,70,39,27,"isTaskRegisteredAsync"],[74,91,39,11],[74,92,39,49,"taskName"],[74,100,39,11],[74,101,34,7],[76,0,34,7],[77,0,34,7],[78,0,34,7],[79,0,34,7],[80,0,34,7],[81,0,34,7],[82,0,34,7],[84,0,41,7],[84,11,41,22,"getTaskOptionsAsync"],[84,30,41,7],[84,31,41,42,"taskName"],[84,39,41,7],[85,0,41,7],[86,0,41,7],[87,0,41,7],[88,0,41,7],[89,0,41,7],[89,16,42,9,"ExpoTaskManager"],[89,41,42,25,"getTaskOptionsAsync"],[89,60,41,7],[90,0,41,7],[91,0,41,7],[92,0,41,7],[94,0,41,7],[94,18,43,14],[94,22,43,18,"UnavailabilityError"],[94,47,43,14],[94,48,43,38],[94,61,43,14],[94,63,43,53],[94,84,43,14],[94,85,41,7],[96,0,41,7],[97,0,45,4,"_validateTaskName"],[97,12,45,4,"_validateTaskName"],[97,29,45,21],[97,30,45,22,"taskName"],[97,38,45,21],[97,39,45,4],[99,0,41,7],[99,46,46,11,"ExpoTaskManager"],[99,71,46,27,"getTaskOptionsAsync"],[99,90,46,11],[99,91,46,47,"taskName"],[99,99,46,11],[99,100,41,7],[101,0,41,7],[102,0,41,7],[103,0,41,7],[104,0,41,7],[105,0,41,7],[106,0,41,7],[107,0,41,7],[109,0,48,7],[109,11,48,22,"getRegisteredTasksAsync"],[109,34,48,7],[110,0,48,7],[111,0,48,7],[112,0,48,7],[113,0,48,7],[114,0,48,7],[114,16,49,9,"ExpoTaskManager"],[114,41,49,25,"getRegisteredTasksAsync"],[114,64,48,7],[115,0,48,7],[116,0,48,7],[117,0,48,7],[119,0,48,7],[119,18,50,14],[119,22,50,18,"UnavailabilityError"],[119,47,50,14],[119,48,50,38],[119,61,50,14],[119,63,50,53],[119,88,50,14],[119,89,48,7],[121,0,48,7],[122,0,48,7],[122,46,52,11,"ExpoTaskManager"],[122,71,52,27,"getRegisteredTasksAsync"],[122,94,52,11],[122,96,48,7],[124,0,48,7],[125,0,48,7],[126,0,48,7],[127,0,48,7],[128,0,48,7],[129,0,48,7],[130,0,48,7],[132,0,54,7],[132,11,54,22,"unregisterTaskAsync"],[132,30,54,7],[132,31,54,42,"taskName"],[132,39,54,7],[133,0,54,7],[134,0,54,7],[135,0,54,7],[136,0,54,7],[137,0,54,7],[137,16,55,9,"ExpoTaskManager"],[137,41,55,25,"unregisterTaskAsync"],[137,60,54,7],[138,0,54,7],[139,0,54,7],[140,0,54,7],[142,0,54,7],[142,18,56,14],[142,22,56,18,"UnavailabilityError"],[142,47,56,14],[142,48,56,38],[142,61,56,14],[142,63,56,53],[142,84,56,14],[142,85,54,7],[144,0,54,7],[145,0,58,4,"_validateTaskName"],[145,12,58,4,"_validateTaskName"],[145,29,58,21],[145,30,58,22,"taskName"],[145,38,58,21],[145,39,58,4],[147,0,54,7],[148,0,54,7],[148,46,59,10,"ExpoTaskManager"],[148,71,59,26,"unregisterTaskAsync"],[148,90,59,10],[148,91,59,46,"taskName"],[148,99,59,10],[148,100,54,7],[150,0,54,7],[151,0,54,7],[152,0,54,7],[153,0,54,7],[154,0,54,7],[155,0,54,7],[156,0,54,7],[158,0,61,7],[158,11,61,22,"unregisterAllTasksAsync"],[158,34,61,7],[159,0,61,7],[160,0,61,7],[161,0,61,7],[162,0,61,7],[163,0,61,7],[163,16,62,9,"ExpoTaskManager"],[163,41,62,25,"unregisterAllTasksAsync"],[163,64,61,7],[164,0,61,7],[165,0,61,7],[166,0,61,7],[168,0,61,7],[168,18,63,14],[168,22,63,18,"UnavailabilityError"],[168,47,63,14],[168,48,63,38],[168,61,63,14],[168,63,63,53],[168,88,63,14],[168,89,61,7],[170,0,61,7],[171,0,61,7],[172,0,61,7],[172,46,65,10,"ExpoTaskManager"],[172,71,65,26,"unregisterAllTasksAsync"],[172,94,65,10],[172,96,61,7],[174,0,61,7],[175,0,61,7],[176,0,61,7],[177,0,61,7],[178,0,61,7],[179,0,61,7],[180,0,61,7],[182,0,67,0,"eventEmitter"],[182,2,67,0,"eventEmitter"],[182,14,67,12],[182,15,67,13,"addListener"],[182,26,67,0],[182,27,67,25,"ExpoTaskManager"],[182,52,67,41,"EVENT_NAME"],[182,62,67,0],[182,64,67,53],[183,0,67,53],[184,0,67,53],[185,0,67,53],[186,0,67,53],[187,0,67,53],[188,0,67,62,"data"],[188,12,67,62,"data"],[188,16,67,53],[188,24,67,62,"data"],[188,28,67,53],[188,30,67,68,"error"],[188,35,67,53],[188,43,67,68,"error"],[188,48,67,53],[188,50,67,75,"executionInfo"],[188,63,67,53],[188,71,67,75,"executionInfo"],[188,84,67,53],[189,0,68,12,"eventId"],[189,12,68,12,"eventId"],[189,19,67,53],[189,22,68,34,"executionInfo"],[189,35,67,53],[189,36,68,12,"eventId"],[189,43,67,53],[189,45,68,21,"taskName"],[189,53,67,53],[189,56,68,34,"executionInfo"],[189,69,67,53],[189,70,68,21,"taskName"],[189,78,67,53],[190,0,69,10,"task"],[190,12,69,10,"task"],[190,16,67,53],[190,19,69,17,"tasks"],[190,24,69,22],[190,25,69,23,"get"],[190,28,69,17],[190,29,69,27,"taskName"],[190,37,69,17],[190,38,67,53],[191,0,70,8,"result"],[191,12,70,8,"result"],[191,18,67,53],[191,21,70,17],[191,25,67,53],[193,0,67,53],[193,17,71,8,"task"],[193,21,67,53],[194,0,67,53],[195,0,67,53],[196,0,67,53],[198,0,67,53],[199,0,67,53],[200,0,67,53],[200,46,74,27,"task"],[200,50,74,31],[200,51,74,32],[201,0,74,34,"data"],[201,14,74,34,"data"],[201,18,74,38],[201,20,74,34,"data"],[201,24,74,32],[202,0,74,40,"error"],[202,14,74,40,"error"],[202,19,74,45],[202,21,74,40,"error"],[202,26,74,32],[203,0,74,47,"executionInfo"],[203,14,74,47,"executionInfo"],[203,27,74,60],[203,29,74,47,"executionInfo"],[204,0,74,32],[204,13,74,31],[204,14,67,53],[206,0,67,53],[207,0,74,12,"result"],[207,12,74,12,"result"],[207,18,67,53],[208,0,67,53],[209,0,67,53],[211,0,67,53],[212,0,67,53],[213,0,67,53],[214,0,77,12,"console"],[214,12,77,12,"console"],[214,19,77,19],[214,20,77,20,"error"],[214,25,77,12],[214,51,77,48,"taskName"],[214,59,77,12],[216,0,67,53],[217,0,67,53],[218,0,67,53],[219,0,67,53],[219,46,81,18,"ExpoTaskManager"],[219,71,81,34,"notifyTaskFinishedAsync"],[219,94,81,18],[219,95,81,58,"taskName"],[219,103,81,18],[219,105,81,68],[220,0,81,70,"eventId"],[220,14,81,70,"eventId"],[220,21,81,77],[220,23,81,70,"eventId"],[220,30,81,68],[221,0,81,79,"result"],[221,14,81,79,"result"],[221,20,81,85],[221,22,81,79,"result"],[222,0,81,68],[222,13,81,18],[222,14,67,53],[224,0,67,53],[225,0,67,53],[227,0,67,53],[228,0,67,53],[229,0,67,53],[231,0,67,53],[232,0,85,8,"console"],[232,12,85,8,"console"],[232,19,85,15],[232,20,85,16,"warn"],[232,24,85,8],[232,50,85,43,"taskName"],[232,58,85,8],[233,0,67,53],[234,0,67,53],[234,46,87,14,"ExpoTaskManager"],[234,71,87,30,"notifyTaskFinishedAsync"],[234,94,87,14],[234,95,87,54,"taskName"],[234,103,87,14],[234,105,87,64],[235,0,87,66,"eventId"],[235,14,87,66,"eventId"],[235,21,87,73],[235,23,87,66,"eventId"],[235,30,87,64],[236,0,87,75,"result"],[236,14,87,75,"result"],[236,20,87,81],[236,22,87,75,"result"],[237,0,87,64],[237,13,87,14],[237,14,67,53],[239,0,67,53],[240,0,67,53],[241,0,67,53],[241,46,90,14,"ExpoTaskManager"],[241,71,90,30,"unregisterTaskAsync"],[241,90,90,14],[241,91,90,50,"taskName"],[241,99,90,14],[241,100,67,53],[243,0,67,53],[244,0,67,53],[245,0,67,53],[246,0,67,53],[247,0,67,53],[248,0,67,53],[249,0,67,53],[249,3,67,0],[250,0,95,0,"Promise"],[250,2,95,0,"Promise"],[250,9,95,7],[250,10,95,8,"resolve"],[250,17,95,0],[250,20,95,18,"then"],[250,24,95,0],[250,25,95,23],[250,37,95,29],[251,0,96,4,"isRunningDuringInitialization"],[251,4,96,4,"isRunningDuringInitialization"],[251,33,96,33],[251,36,96,36],[251,41,96,4],[252,0,97,1],[252,3,95,0]]},"type":"js/module"}]}
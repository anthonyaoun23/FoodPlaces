{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/wrapNativeSuper","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"./ExpoCrypto","data":{"isAsync":false}},{"name":"./Crypto.types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    digestStringAsync: true\n  };\n  exports.digestStringAsync = digestStringAsync;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n\n  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/wrapNativeSuper\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[7], \"@unimodules/core\");\n\n  var _ExpoCrypto = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"./ExpoCrypto\"));\n\n  var _Crypto = _$$_REQUIRE(_dependencyMap[9], \"./Crypto.types\");\n\n  Object.keys(_Crypto).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function get() {\n        return _Crypto[key];\n      }\n    });\n  });\n\n  var CryptoError = function (_TypeError) {\n    (0, _inherits2.default)(CryptoError, _TypeError);\n\n    function CryptoError(message) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, CryptoError);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CryptoError).call(this, \"expo-crypto: \" + message));\n      _this.code = 'ERR_CRYPTO';\n      return _this;\n    }\n\n    return CryptoError;\n  }((0, _wrapNativeSuper2.default)(TypeError));\n\n  function assertAlgorithm(algorithm) {\n    if (!Object.values(_Crypto.CryptoDigestAlgorithm).includes(algorithm)) {\n      throw new CryptoError(\"Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.\" + Object.keys(_Crypto.CryptoDigestAlgorithm).join(', AlgCryptoDigestAlgorithmorithm.'));\n    }\n  }\n\n  function assertData(data) {\n    if (typeof data !== 'string') {\n      throw new CryptoError(\"Invalid data provided. Expected a string.\");\n    }\n  }\n\n  function assertEncoding(encoding) {\n    if (!Object.values(_Crypto.CryptoEncoding).includes(encoding)) {\n      throw new CryptoError(\"Invalid encoding provided. Expected one of: CryptoEncoding.\" + Object.keys(_Crypto.CryptoEncoding).join(', CryptoEncoding.'));\n    }\n  }\n\n  function digestStringAsync(algorithm, data) {\n    var options,\n        _args = arguments;\n    return _regenerator.default.async(function digestStringAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {\n              encoding: _Crypto.CryptoEncoding.HEX\n            };\n\n            if (_ExpoCrypto.default.digestStringAsync) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('expo-crypto', 'digestStringAsync');\n\n          case 3:\n            assertAlgorithm(algorithm);\n            assertData(data);\n            assertEncoding(options.encoding);\n            _context.next = 8;\n            return _regenerator.default.awrap(_ExpoCrypto.default.digestStringAsync(algorithm, data, options));\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n});","map":[[24,0,1,0],[26,0,2,0],[28,0,3,0],[30,0,4,0],[31,0,4,0],[32,0,4,0],[33,0,4,0],[34,0,4,0],[35,0,4,0],[36,0,4,0],[37,0,4,0],[38,0,4,0],[39,0,4,0],[41,6,5,6,"CryptoError"],[41,17],[44,0,6,4],[44,25,6,16,"message"],[44,32,6,4],[44,34,6,25],[45,0,6,25],[47,0,6,25],[48,0,7,8],[48,133,7,30,"message"],[48,140,7,8],[49,0,8,8],[49,12,8,13,"code"],[49,16,8,8],[49,19,8,20],[49,31,8,8],[50,0,6,25],[51,0,9,5],[54,35,5,26,"TypeError"],[54,44],[56,0,11,0],[56,11,11,9,"assertAlgorithm"],[56,26,11,0],[56,27,11,25,"algorithm"],[56,36,11,0],[56,38,11,36],[57,0,12,4],[57,8,12,8],[57,9,12,9,"Object"],[57,15,12,15],[57,16,12,16,"values"],[57,22,12,9],[57,23,12,23,"CryptoDigestAlgorithm"],[57,52,12,9],[57,54,12,46,"includes"],[57,62,12,9],[57,63,12,55,"algorithm"],[57,72,12,9],[57,73,12,4],[57,75,12,67],[58,0,13,8],[58,12,13,14],[58,16,13,18,"CryptoError"],[58,27,13,14],[58,100,13,100,"Object"],[58,106,13,106],[58,107,13,107,"keys"],[58,111,13,100],[58,112,13,112,"CryptoDigestAlgorithm"],[58,141,13,100],[58,143,13,135,"join"],[58,147,13,100],[58,148,13,140],[58,183,13,100],[58,184,13,14],[58,185,13,8],[59,0,14,5],[60,0,15,1],[62,0,16,0],[62,11,16,9,"assertData"],[62,21,16,0],[62,22,16,20,"data"],[62,26,16,0],[62,28,16,26],[63,0,17,4],[63,8,17,8],[63,15,17,15,"data"],[63,19,17,8],[63,24,17,24],[63,32,17,4],[63,34,17,34],[64,0,18,8],[64,12,18,14],[64,16,18,18,"CryptoError"],[64,27,18,14],[64,72,18,8],[65,0,19,5],[66,0,20,1],[68,0,21,0],[68,11,21,9,"assertEncoding"],[68,25,21,0],[68,26,21,24,"encoding"],[68,34,21,0],[68,36,21,34],[69,0,22,4],[69,8,22,8],[69,9,22,9,"Object"],[69,15,22,15],[69,16,22,16,"values"],[69,22,22,9],[69,23,22,23,"CryptoEncoding"],[69,45,22,9],[69,47,22,39,"includes"],[69,55,22,9],[69,56,22,48,"encoding"],[69,64,22,9],[69,65,22,4],[69,67,22,59],[70,0,23,8],[70,12,23,14],[70,16,23,18,"CryptoError"],[70,27,23,14],[70,92,23,92,"Object"],[70,98,23,98],[70,99,23,99,"keys"],[70,103,23,92],[70,104,23,104,"CryptoEncoding"],[70,126,23,92],[70,128,23,120,"join"],[70,132,23,92],[70,133,23,125],[70,152,23,92],[70,153,23,14],[70,154,23,8],[71,0,24,5],[72,0,25,1],[74,0,26,7],[74,11,26,22,"digestStringAsync"],[74,28,26,7],[74,29,26,40,"algorithm"],[74,38,26,7],[74,40,26,51,"data"],[74,44,26,7],[75,0,26,7],[76,0,26,7],[77,0,26,7],[78,0,26,7],[79,0,26,7],[80,0,26,7],[81,0,26,57,"options"],[81,12,26,57,"options"],[81,19,26,7],[81,78,26,67],[82,0,26,69,"encoding"],[82,14,26,69,"encoding"],[82,22,26,77],[82,24,26,79,"CryptoEncoding"],[82,47,26,94,"HEX"],[83,0,26,67],[83,13,26,7],[85,0,26,7],[85,16,27,9,"ExpoCrypto"],[85,36,27,20,"digestStringAsync"],[85,53,26,7],[86,0,26,7],[87,0,26,7],[88,0,26,7],[90,0,26,7],[90,18,28,14],[90,22,28,18,"UnavailabilityError"],[90,47,28,14],[90,48,28,38],[90,61,28,14],[90,63,28,53],[90,82,28,14],[90,83,26,7],[92,0,26,7],[93,0,30,4,"assertAlgorithm"],[93,12,30,4,"assertAlgorithm"],[93,27,30,19],[93,28,30,20,"algorithm"],[93,37,30,19],[93,38,30,4],[94,0,31,4,"assertData"],[94,12,31,4,"assertData"],[94,22,31,14],[94,23,31,15,"data"],[94,27,31,14],[94,28,31,4],[95,0,32,4,"assertEncoding"],[95,12,32,4,"assertEncoding"],[95,26,32,18],[95,27,32,19,"options"],[95,34,32,26],[95,35,32,27,"encoding"],[95,43,32,18],[95,44,32,4],[96,0,26,7],[97,0,26,7],[97,46,33,17,"ExpoCrypto"],[97,66,33,28,"digestStringAsync"],[97,83,33,17],[97,84,33,46,"algorithm"],[97,93,33,17],[97,95,33,57,"data"],[97,99,33,17],[97,101,33,63,"options"],[97,108,33,17],[97,109,26,7],[99,0,26,7],[100,0,26,7],[102,0,26,7],[103,0,26,7],[104,0,26,7],[105,0,26,7],[106,0,26,7],[107,0,26,7],[108,0,26,7]]},"type":"js/module"}]}
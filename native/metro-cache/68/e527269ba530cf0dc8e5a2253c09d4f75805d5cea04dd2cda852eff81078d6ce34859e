{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/objectSpread","data":{"isAsync":false}},{"name":"expo-constants","data":{"isAsync":false}},{"name":"fbemitter","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"uuid-js","data":{"isAsync":false}},{"name":"./LogSerialization","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.__waitForEmptyLogQueueAsync = __waitForEmptyLogQueueAsync;\n  exports.default = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/objectSpread\"));\n\n  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"expo-constants\"));\n\n  var _fbemitter = _$$_REQUIRE(_dependencyMap[4], \"fbemitter\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"invariant\"));\n\n  var _uuidJs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"uuid-js\"));\n\n  var _LogSerialization = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./LogSerialization\"));\n\n  var _sessionId = _uuidJs.default.create().toString();\n\n  var _logQueue = [];\n\n  var _transportEventEmitter = new _fbemitter.EventEmitter();\n\n  var _logCounter = 0;\n  var _isSendingLogs = false;\n  var _completionPromise = null;\n  var _resolveCompletion2 = null;\n\n  function enqueueRemoteLogAsync(level, additionalFields, data) {\n    var warning, lines, _ref, body, includesStack;\n\n    return _regenerator.default.async(function enqueueRemoteLogAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!_isReactNativeWarning(data)) {\n              _context.next = 8;\n              break;\n            }\n\n            if (!(data.length === 0)) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error(\"Warnings must include log arguments\");\n\n          case 3:\n            warning = data[0];\n\n            if (!(typeof warning !== 'string')) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new TypeError(\"The log argument for a warning must be a string\");\n\n          case 6:\n            lines = warning.split('\\n');\n\n            if (lines.length > 1 && /^\\s+in /.test(lines[1])) {\n              data[0] = lines[0];\n            }\n\n          case 8:\n            _context.next = 10;\n            return _regenerator.default.awrap(_LogSerialization.default.serializeLogDataAsync(data, level));\n\n          case 10:\n            _ref = _context.sent;\n            body = _ref.body;\n            includesStack = _ref.includesStack;\n\n            _logQueue.push((0, _objectSpread2.default)({\n              count: _logCounter++,\n              level: level,\n              body: body,\n              includesStack: includesStack\n            }, additionalFields));\n\n            _sendRemoteLogsAsync().catch(function (error) {\n              setImmediate(function () {\n                throw error;\n              });\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  function _sendRemoteLogsAsync() {\n    var batch, logUrl;\n    return _regenerator.default.async(function _sendRemoteLogsAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(_isSendingLogs || !_logQueue.length)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            batch = _logQueue.splice(0);\n            logUrl = _expoConstants.default.manifest.logUrl;\n\n            if (!(typeof logUrl !== 'string')) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error('The Expo project manifest must specify `logUrl`');\n\n          case 6:\n            _isSendingLogs = true;\n            _context2.prev = 7;\n            _context2.next = 10;\n            return _regenerator.default.awrap(_sendNextLogBatchAsync(batch, logUrl));\n\n          case 10:\n            _context2.prev = 10;\n            _isSendingLogs = false;\n            return _context2.finish(10);\n\n          case 13:\n            if (!_logQueue.length) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _sendRemoteLogsAsync());\n\n          case 17:\n            if (_resolveCompletion2) {\n              _resolveCompletion2();\n            }\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[7,, 10, 13]]);\n  }\n\n  function _sendNextLogBatchAsync(batch, logUrl) {\n    var response, headers, success;\n    return _regenerator.default.async(function _sendNextLogBatchAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            headers = {\n              'Content-Type': 'application/json',\n              Connection: 'keep-alive',\n              'Proxy-Connection': 'keep-alive',\n              Accept: 'application/json',\n              'Device-Id': _expoConstants.default.installationId,\n              'Session-Id': _sessionId\n            };\n\n            if (_expoConstants.default.deviceName) {\n              headers['Device-Name'] = _expoConstants.default.deviceName;\n            }\n\n            _context3.prev = 2;\n            _context3.next = 5;\n            return _regenerator.default.awrap(fetch(logUrl, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify(batch)\n            }));\n\n          case 5:\n            response = _context3.sent;\n            _context3.next = 12;\n            break;\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](2);\n\n            _transportEventEmitter.emit('error', {\n              error: _context3.t0\n            });\n\n            return _context3.abrupt(\"return\");\n\n          case 12:\n            success = response.status >= 200 && response.status < 300;\n\n            if (!success) {\n              _transportEventEmitter.emit('error', {\n                error: new Error(\"An HTTP error occurred when sending remote logs\"),\n                response: response\n              });\n            }\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[2, 8]]);\n  }\n\n  function addTransportErrorListener(listener) {\n    return _transportEventEmitter.addListener('error', listener);\n  }\n\n  function _isReactNativeWarning(data) {\n    var message = data[0];\n    return data.length === 1 && typeof message === 'string' && message.startsWith('Warning: ');\n  }\n\n  var _default = {\n    enqueueRemoteLogAsync: enqueueRemoteLogAsync,\n    addTransportErrorListener: addTransportErrorListener\n  };\n  exports.default = _default;\n\n  function __waitForEmptyLogQueueAsync() {\n    if (_completionPromise) {\n      return _completionPromise;\n    }\n\n    if (!_isSendingLogs && !_logQueue.length) {\n      return Promise.resolve();\n    }\n\n    _completionPromise = new Promise(function (resolve) {\n      _resolveCompletion2 = function _resolveCompletion() {\n        (0, _invariant.default)(!_isSendingLogs, \"Must not be sending logs at completion\");\n        (0, _invariant.default)(!_logQueue.length, \"Log queue must be empty at completion\");\n        _completionPromise = null;\n        _resolveCompletion2 = null;\n        resolve();\n      };\n    });\n    return _completionPromise;\n  }\n});","map":[[14,0,1,0],[16,0,2,0],[18,0,3,0],[20,0,4,0],[22,0,5,0],[24,0,6,0],[24,6,6,6,"_sessionId"],[24,16,6,16],[24,19,6,19,"UUID"],[24,35,6,24,"create"],[24,41,6,19],[24,44,6,33,"toString"],[24,52,6,19],[24,54,6,0],[26,0,7,0],[26,6,7,6,"_logQueue"],[26,15,7,15],[26,18,7,18],[26,20,7,0],[28,0,8,0],[28,6,8,6,"_transportEventEmitter"],[28,28,8,28],[28,31,8,31],[28,35,8,35,"EventEmitter"],[28,58,8,31],[28,60,8,0],[30,0,9,0],[30,6,9,4,"_logCounter"],[30,17,9,15],[30,20,9,18],[30,21,9,0],[31,0,10,0],[31,6,10,4,"_isSendingLogs"],[31,20,10,18],[31,23,10,21],[31,28,10,0],[32,0,11,0],[32,6,11,4,"_completionPromise"],[32,24,11,22],[32,27,11,25],[32,31,11,0],[33,0,12,0],[33,6,12,4,"_resolveCompletion"],[33,25,12,22],[33,28,12,25],[33,32,12,0],[35,0,13,0],[35,11,13,15,"enqueueRemoteLogAsync"],[35,32,13,0],[35,33,13,37,"level"],[35,38,13,0],[35,40,13,44,"additionalFields"],[35,56,13,0],[35,58,13,62,"data"],[35,62,13,0],[36,0,13,0],[38,0,13,0],[39,0,13,0],[40,0,13,0],[41,0,13,0],[42,0,13,0],[42,17,14,8,"_isReactNativeWarning"],[42,38,14,29],[42,39,14,30,"data"],[42,43,14,29],[42,44,13,0],[43,0,13,0],[44,0,13,0],[45,0,13,0],[47,0,13,0],[47,18,16,12,"data"],[47,22,16,16],[47,23,16,17,"length"],[47,29,16,12],[47,34,16,28],[47,35,13,0],[48,0,13,0],[49,0,13,0],[50,0,13,0],[52,0,13,0],[52,18,17,18],[52,22,17,22,"Error"],[52,27,17,18],[52,66,13,0],[54,0,13,0],[55,0,19,14,"warning"],[55,12,19,14,"warning"],[55,19,13,0],[55,22,19,24,"data"],[55,26,19,28],[55,27,19,29],[55,28,19,28],[55,29,13,0],[57,0,13,0],[57,18,20,12],[57,25,20,19,"warning"],[57,32,20,12],[57,37,20,31],[57,45,13,0],[58,0,13,0],[59,0,13,0],[60,0,13,0],[62,0,13,0],[62,18,21,18],[62,22,21,22,"TypeError"],[62,31,21,18],[62,82,13,0],[64,0,13,0],[65,0,23,14,"lines"],[65,12,23,14,"lines"],[65,17,13,0],[65,20,23,22,"warning"],[65,27,23,29],[65,28,23,30,"split"],[65,33,23,22],[65,34,23,36],[65,38,23,22],[65,39,13,0],[67,0,24,8],[67,16,24,12,"lines"],[67,21,24,17],[67,22,24,18,"length"],[67,28,24,12],[67,31,24,27],[67,32,24,12],[67,36,24,32],[67,46,24,42,"test"],[67,50,24,32],[67,51,24,47,"lines"],[67,56,24,52],[67,57,24,53],[67,58,24,52],[67,59,24,32],[67,60,24,8],[67,62,24,58],[68,0,25,12,"data"],[68,14,25,12,"data"],[68,18,25,16],[68,19,25,17],[68,20,25,16],[68,21,25,12],[68,24,25,22,"lines"],[68,29,25,27],[68,30,25,28],[68,31,25,27],[68,32,25,12],[69,0,26,9],[71,0,13,0],[72,0,13,0],[73,0,13,0],[73,46,28,40,"LogSerialization"],[73,72,28,57,"serializeLogDataAsync"],[73,93,28,40],[73,94,28,79,"data"],[73,98,28,40],[73,100,28,85,"level"],[73,105,28,40],[73,106,13,0],[75,0,13,0],[76,0,13,0],[77,0,28,10,"body"],[77,12,28,10,"body"],[77,16,13,0],[77,24,28,10,"body"],[77,28,13,0],[78,0,28,16,"includesStack"],[78,12,28,16,"includesStack"],[78,25,13,0],[78,33,28,16,"includesStack"],[78,46,13,0],[80,0,29,4,"_logQueue"],[80,12,29,4,"_logQueue"],[80,21,29,13],[80,22,29,14,"push"],[80,26,29,4],[81,0,30,8,"count"],[81,14,30,8,"count"],[81,19,30,13],[81,21,30,15,"_logCounter"],[81,32,30,26],[81,34,29,4],[82,0,31,8,"level"],[82,14,31,8,"level"],[82,19,31,13],[82,21,31,8,"level"],[82,26,29,4],[83,0,32,8,"body"],[83,14,32,8,"body"],[83,18,32,12],[83,20,32,8,"body"],[83,24,29,4],[84,0,33,8,"includesStack"],[84,14,33,8,"includesStack"],[84,27,33,21],[84,29,33,8,"includesStack"],[85,0,29,4],[85,15,34,11,"additionalFields"],[85,31,29,4],[87,0,37,4,"_sendRemoteLogsAsync"],[87,12,37,4,"_sendRemoteLogsAsync"],[87,32,37,24],[87,35,37,27,"catch"],[87,40,37,4],[87,41,37,33],[87,51,37,33,"error"],[87,56,37,38],[87,58,37,42],[88,0,38,8,"setImmediate"],[88,14,38,8,"setImmediate"],[88,26,38,20],[88,27,38,21],[88,39,38,27],[89,0,39,12],[89,22,39,18,"error"],[89,27,39,12],[90,0,40,9],[90,15,38,20],[90,16,38,8],[91,0,41,5],[91,13,37,4],[93,0,13,0],[94,0,13,0],[95,0,13,0],[96,0,13,0],[97,0,13,0],[98,0,13,0],[99,0,13,0],[101,0,43,0],[101,11,43,15,"_sendRemoteLogsAsync"],[101,31,43,0],[102,0,43,0],[103,0,43,0],[104,0,43,0],[105,0,43,0],[106,0,43,0],[107,0,43,0],[107,18,44,8,"_isSendingLogs"],[107,32,44,22],[107,36,44,26],[107,37,44,27,"_logQueue"],[107,46,44,36],[107,47,44,37,"length"],[107,53,43,0],[108,0,43,0],[109,0,43,0],[110,0,43,0],[112,0,43,0],[114,0,43,0],[115,0,49,8,"batch"],[115,12,49,8,"batch"],[115,17,43,0],[115,20,49,16,"_logQueue"],[115,29,49,25],[115,30,49,26,"splice"],[115,36,49,16],[115,37,49,33],[115,38,49,16],[115,39,43,0],[116,0,50,10,"logUrl"],[116,12,50,10,"logUrl"],[116,18,43,0],[116,21,50,21,"Constants"],[116,44,50,31,"manifest"],[116,52,43,0],[116,53,50,10,"logUrl"],[116,59,43,0],[118,0,43,0],[118,18,51,8],[118,25,51,15,"logUrl"],[118,31,51,8],[118,36,51,26],[118,44,43,0],[119,0,43,0],[120,0,43,0],[121,0,43,0],[123,0,43,0],[123,18,52,14],[123,22,52,18,"Error"],[123,27,52,14],[123,28,52,24],[123,77,52,14],[123,78,43,0],[125,0,43,0],[126,0,54,4,"_isSendingLogs"],[126,12,54,4,"_isSendingLogs"],[126,26,54,18],[126,29,54,21],[126,33,54,4],[127,0,43,0],[128,0,43,0],[129,0,43,0],[129,46,56,14,"_sendNextLogBatchAsync"],[129,68,56,36],[129,69,56,37,"batch"],[129,74,56,36],[129,76,56,44,"logUrl"],[129,82,56,36],[129,83,43,0],[131,0,43,0],[132,0,43,0],[133,0,59,8,"_isSendingLogs"],[133,12,59,8,"_isSendingLogs"],[133,26,59,22],[133,29,59,25],[133,34,59,8],[134,0,43,0],[136,0,43,0],[137,0,43,0],[137,17,61,8,"_logQueue"],[137,26,61,17],[137,27,61,18,"length"],[137,33,43,0],[138,0,43,0],[139,0,43,0],[140,0,43,0],[142,0,43,0],[142,46,62,15,"_sendRemoteLogsAsync"],[142,66,62,35],[142,68,43,0],[144,0,43,0],[145,0,64,9],[145,16,64,13,"_resolveCompletion"],[145,35,64,9],[145,37,64,33],[146,0,65,8,"_resolveCompletion"],[146,14,65,8,"_resolveCompletion"],[146,33,65,26],[147,0,66,5],[149,0,43,0],[150,0,43,0],[151,0,43,0],[152,0,43,0],[153,0,43,0],[154,0,43,0],[155,0,43,0],[157,0,68,0],[157,11,68,15,"_sendNextLogBatchAsync"],[157,33,68,0],[157,34,68,38,"batch"],[157,39,68,0],[157,41,68,45,"logUrl"],[157,47,68,0],[158,0,68,0],[159,0,68,0],[160,0,68,0],[161,0,68,0],[162,0,68,0],[163,0,70,8,"headers"],[163,12,70,8,"headers"],[163,19,68,0],[163,22,70,18],[164,0,71,8],[164,30,71,24],[164,48,70,18],[165,0,72,8,"Connection"],[165,14,72,8,"Connection"],[165,24,72,18],[165,26,72,20],[165,38,70,18],[166,0,73,8],[166,34,73,28],[166,46,70,18],[167,0,74,8,"Accept"],[167,14,74,8,"Accept"],[167,20,74,14],[167,22,74,16],[167,40,70,18],[168,0,75,8],[168,27,75,21,"Constants"],[168,50,75,31,"installationId"],[168,64,70,18],[169,0,76,8],[169,28,76,22,"_sessionId"],[170,0,70,18],[170,13,68,0],[172,0,78,4],[172,16,78,8,"Constants"],[172,39,78,18,"deviceName"],[172,49,78,4],[172,51,78,30],[173,0,79,8,"headers"],[173,14,79,8,"headers"],[173,21,79,15],[173,22,79,16],[173,35,79,15],[173,36,79,8],[173,39,79,33,"Constants"],[173,62,79,43,"deviceName"],[173,72,79,8],[174,0,80,5],[176,0,68,0],[177,0,68,0],[178,0,68,0],[178,46,82,25,"fetch"],[178,51,82,30],[178,52,82,31,"logUrl"],[178,58,82,30],[178,60,82,39],[179,0,83,12,"method"],[179,14,83,12,"method"],[179,20,83,18],[179,22,83,20],[179,28,82,39],[180,0,84,12,"headers"],[180,14,84,12,"headers"],[180,21,84,19],[180,23,84,12,"headers"],[180,30,82,39],[181,0,85,12,"body"],[181,14,85,12,"body"],[181,18,85,16],[181,20,85,18,"JSON"],[181,24,85,22],[181,25,85,23,"stringify"],[181,34,85,18],[181,35,85,33,"batch"],[181,40,85,18],[182,0,82,39],[182,13,82,30],[182,14,68,0],[184,0,68,0],[185,0,82,8,"response"],[185,12,82,8,"response"],[185,20,68,0],[186,0,68,0],[187,0,68,0],[189,0,68,0],[190,0,68,0],[191,0,68,0],[193,0,89,8,"_transportEventEmitter"],[193,12,89,8,"_transportEventEmitter"],[193,34,89,30],[193,35,89,31,"emit"],[193,39,89,8],[193,40,89,36],[193,47,89,8],[193,49,89,45],[194,0,89,47,"error"],[194,14,89,47,"error"],[194,19,89,52],[195,0,89,45],[195,13,89,8],[197,0,68,0],[199,0,68,0],[200,0,92,8,"success"],[200,12,92,8,"success"],[200,19,68,0],[200,22,92,18,"response"],[200,30,92,26],[200,31,92,27,"status"],[200,37,92,18],[200,41,92,37],[200,44,92,18],[200,48,92,44,"response"],[200,56,92,52],[200,57,92,53,"status"],[200,63,92,44],[200,66,92,62],[200,69,68,0],[202,0,93,4],[202,16,93,8],[202,17,93,9,"success"],[202,24,93,4],[202,26,93,18],[203,0,94,8,"_transportEventEmitter"],[203,14,94,8,"_transportEventEmitter"],[203,36,94,30],[203,37,94,31,"emit"],[203,41,94,8],[203,42,94,36],[203,49,94,8],[203,51,94,45],[204,0,95,12,"error"],[204,16,95,12,"error"],[204,21,95,17],[204,23,95,19],[204,27,95,23,"Error"],[204,32,95,19],[204,83,94,45],[205,0,96,12,"response"],[205,16,96,12,"response"],[205,24,96,20],[205,26,96,12,"response"],[206,0,94,45],[206,15,94,8],[207,0,98,5],[209,0,68,0],[210,0,68,0],[211,0,68,0],[212,0,68,0],[213,0,68,0],[214,0,68,0],[215,0,68,0],[217,0,100,0],[217,11,100,9,"addTransportErrorListener"],[217,36,100,0],[217,37,100,35,"listener"],[217,45,100,0],[217,47,100,45],[218,0,101,4],[218,11,101,11,"_transportEventEmitter"],[218,33,101,33],[218,34,101,34,"addListener"],[218,45,101,11],[218,46,101,46],[218,53,101,11],[218,55,101,55,"listener"],[218,63,101,11],[218,64,101,4],[219,0,102,1],[221,0,103,0],[221,11,103,9,"_isReactNativeWarning"],[221,32,103,0],[221,33,103,31,"data"],[221,37,103,0],[221,39,103,37],[222,0,105,4],[222,8,105,8,"message"],[222,15,105,15],[222,18,105,18,"data"],[222,22,105,22],[222,23,105,23],[222,24,105,22],[222,25,105,4],[223,0,106,4],[223,11,106,11,"data"],[223,15,106,15],[223,16,106,16,"length"],[223,22,106,11],[223,27,106,27],[223,28,106,11],[223,32,106,32],[223,39,106,39,"message"],[223,46,106,32],[223,51,106,51],[223,59,106,11],[223,63,106,63,"message"],[223,70,106,70],[223,71,106,71,"startsWith"],[223,81,106,63],[223,82,106,82],[223,93,106,63],[223,94,106,4],[224,0,107,1],[226,17,108,15],[227,0,109,4,"enqueueRemoteLogAsync"],[227,4,109,4,"enqueueRemoteLogAsync"],[227,25,109,25],[227,27,109,4,"enqueueRemoteLogAsync"],[227,48,108,15],[228,0,110,4,"addTransportErrorListener"],[228,4,110,4,"addTransportErrorListener"],[228,29,110,29],[228,31,110,4,"addTransportErrorListener"],[229,0,108,15],[229,3],[232,0,116,7],[232,11,116,16,"__waitForEmptyLogQueueAsync"],[232,38,116,7],[232,41,116,46],[233,0,117,4],[233,8,117,8,"_completionPromise"],[233,26,117,4],[233,28,117,28],[234,0,118,8],[234,13,118,15,"_completionPromise"],[234,31,118,8],[235,0,119,5],[237,0,120,4],[237,8,120,8],[237,9,120,9,"_isSendingLogs"],[237,23,120,8],[237,27,120,27],[237,28,120,28,"_logQueue"],[237,37,120,37],[237,38,120,38,"length"],[237,44,120,4],[237,46,120,46],[238,0,121,8],[238,13,121,15,"Promise"],[238,20,121,22],[238,21,121,23,"resolve"],[238,28,121,15],[238,30,121,8],[239,0,122,5],[241,0,123,4,"_completionPromise"],[241,4,123,4,"_completionPromise"],[241,22,123,22],[241,25,123,25],[241,29,123,29,"Promise"],[241,36,123,25],[241,37,123,37],[241,47,123,37,"resolve"],[241,54,123,44],[241,56,123,48],[242,0,124,8,"_resolveCompletion"],[242,6,124,8,"_resolveCompletion"],[242,25,124,26],[242,28,124,29],[242,58,124,35],[243,0,125,12],[243,32,125,22],[243,33,125,23,"_isSendingLogs"],[243,47,125,12],[244,0,126,12],[244,32,126,22],[244,33,126,23,"_logQueue"],[244,42,126,32],[244,43,126,33,"length"],[244,49,126,12],[245,0,127,12,"_completionPromise"],[245,8,127,12,"_completionPromise"],[245,26,127,30],[245,29,127,33],[245,33,127,12],[246,0,128,12,"_resolveCompletion"],[246,8,128,12,"_resolveCompletion"],[246,27,128,30],[246,30,128,33],[246,34,128,12],[247,0,129,12,"resolve"],[247,8,129,12,"resolve"],[247,15,129,19],[248,0,130,9],[248,7,124,8],[249,0,131,5],[249,5,123,25],[249,6,123,4],[250,0,132,4],[250,11,132,11,"_completionPromise"],[250,29,132,4],[251,0,133,1]]},"type":"js/module"}]}
{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"base64-js","data":{"isAsync":false}},{"name":"./ExpoRandom","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getRandomBytesAsync = getRandomBytesAsync;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[2], \"@unimodules/core\");\n\n  var _base64Js = _$$_REQUIRE(_dependencyMap[3], \"base64-js\");\n\n  var _ExpoRandom = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./ExpoRandom\"));\n\n  function assertByteCount(value) {\n    if (typeof value !== 'number' || isNaN(value) || Math.floor(value) < 0 || Math.floor(value) > 1024) {\n      throw new TypeError(\"expo-random: getRandomBytesAsync(\" + value + \") expected a valid number from range 0...1024\");\n    }\n  }\n\n  function getRandomBytesAsync(byteCount) {\n    var validByteCount, base64;\n    return _regenerator.default.async(function getRandomBytesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assertByteCount(byteCount);\n            validByteCount = Math.floor(byteCount);\n\n            if (!_ExpoRandom.default.getRandomBytesAsync) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 5;\n            return _regenerator.default.awrap(_ExpoRandom.default.getRandomBytesAsync(validByteCount));\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 8:\n            if (!_ExpoRandom.default.getRandomBase64StringAsync) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 11;\n            return _regenerator.default.awrap(_ExpoRandom.default.getRandomBase64StringAsync(validByteCount));\n\n          case 11:\n            base64 = _context.sent;\n            return _context.abrupt(\"return\", (0, _base64Js.toByteArray)(base64));\n\n          case 15:\n            throw new _core.UnavailabilityError('expo-random', 'getRandomBytesAsync');\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n});","map":[[11,0,1,0],[13,0,2,0],[15,0,3,0],[17,0,4,0],[17,11,4,9,"assertByteCount"],[17,26,4,0],[17,27,4,25,"value"],[17,32,4,0],[17,34,4,32],[18,0,5,4],[18,8,5,8],[18,15,5,15,"value"],[18,20,5,8],[18,25,5,25],[18,33,5,8],[18,37,6,8,"isNaN"],[18,42,6,13],[18,43,6,14,"value"],[18,48,6,13],[18,49,5,8],[18,53,7,8,"Math"],[18,57,7,12],[18,58,7,13,"floor"],[18,63,7,8],[18,64,7,19,"value"],[18,69,7,8],[18,73,7,28],[18,74,5,8],[18,78,8,8,"Math"],[18,82,8,12],[18,83,8,13,"floor"],[18,88,8,8],[18,89,8,19,"value"],[18,94,8,8],[18,98,8,28],[18,102,5,4],[18,104,8,34],[19,0,9,8],[19,12,9,14],[19,16,9,18,"TypeError"],[19,25,9,14],[19,64,9,64,"value"],[19,69,9,14],[19,120,9,8],[20,0,10,5],[21,0,11,1],[23,0,12,7],[23,11,12,22,"getRandomBytesAsync"],[23,30,12,7],[23,31,12,42,"byteCount"],[23,40,12,7],[24,0,12,7],[25,0,12,7],[26,0,12,7],[27,0,12,7],[28,0,12,7],[29,0,13,4,"assertByteCount"],[29,12,13,4,"assertByteCount"],[29,27,13,19],[29,28,13,20,"byteCount"],[29,37,13,19],[29,38,13,4],[30,0,14,10,"validByteCount"],[30,12,14,10,"validByteCount"],[30,26,12,7],[30,29,14,27,"Math"],[30,33,14,31],[30,34,14,32,"floor"],[30,39,14,27],[30,40,14,38,"byteCount"],[30,49,14,27],[30,50,12,7],[32,0,12,7],[32,17,15,8,"ExpoRandom"],[32,37,15,19,"getRandomBytesAsync"],[32,56,12,7],[33,0,12,7],[34,0,12,7],[35,0,12,7],[37,0,12,7],[38,0,12,7],[38,46,16,21,"ExpoRandom"],[38,66,16,32,"getRandomBytesAsync"],[38,85,16,21],[38,86,16,52,"validByteCount"],[38,100,16,21],[38,101,12,7],[40,0,12,7],[41,0,12,7],[43,0,12,7],[44,0,12,7],[44,17,18,13,"ExpoRandom"],[44,37,18,24,"getRandomBase64StringAsync"],[44,63,12,7],[45,0,12,7],[46,0,12,7],[47,0,12,7],[49,0,12,7],[50,0,12,7],[50,46,19,29,"ExpoRandom"],[50,66,19,40,"getRandomBase64StringAsync"],[50,92,19,29],[50,93,19,67,"validByteCount"],[50,107,19,29],[50,108,12,7],[52,0,12,7],[53,0,19,14,"base64"],[53,12,19,14,"base64"],[53,18,12,7],[54,0,12,7],[54,45,20,15],[54,72,20,27,"base64"],[54,78,20,15],[54,79,12,7],[56,0,12,7],[57,0,12,7],[57,18,23,14],[57,22,23,18,"UnavailabilityError"],[57,47,23,14],[57,48,23,38],[57,61,23,14],[57,63,23,53],[57,84,23,14],[57,85,12,7],[59,0,12,7],[60,0,12,7],[61,0,12,7],[62,0,12,7],[63,0,12,7],[64,0,12,7],[65,0,12,7]]},"type":"js/module"}]}